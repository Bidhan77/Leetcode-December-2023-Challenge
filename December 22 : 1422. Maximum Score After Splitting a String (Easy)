Approach 1
Brute Force

Complexity
Time complexity: O(n^2)
Space complexity:O(1)
Code
class Solution {
    public int maxScore(String s) {
        int n = s.length();
        int maxCount = Integer.MIN_VALUE;

        for (int i = 0; i < n - 1; i++) {
            int zeroCount = 0;
            for (int j = 0; j <= i; j++) {
                if (s.charAt(j) == '0')
                    zeroCount++;
            }
            int oneCount = 0;
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(j) == '1')
                    oneCount++;
            }
            maxCount = Math.max(maxCount, zeroCount + oneCount);
        }
        return maxCount;
    }
}
Approach 2
Better (Two Pass)

Complexity
Time complexity: O(n)
Space complexity:O(1)
Code
class Solution {
    public int maxScore(String s) {
        int n = s.length();
        int maxCount = 0;
        int totalOnes = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                totalOnes++;
            }
        }
        int zero = 0;
        for (int j = 0; j < n - 1; j++) {
            if (s.charAt(j) == '1') {
                totalOnes--;
            } else {
                zero++;
            }
            maxCount = Math.max(maxCount, zero + totalOnes);
        }
        return maxCount;
    }
}
